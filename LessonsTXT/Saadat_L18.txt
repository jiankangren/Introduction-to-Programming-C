//problem 1
#include <stdio.h>

double powerA(double x, int n){

	if (n < 0){
		int pow = n * (-1);

		return 1/(powerA (x, pow-1) * x);
	}
	if (n == 0){
		return 1.0;
	} else {
			return powerA (x, n-1) * x;
			}
}

int powerB (int x, int n){
	int m;
	if (n == 0){
		return 1.0;
		}
	if (n % 2 == 0){
		m = powerB (x, n/2);
		return m * m;
	} else {
		return powerB (x, n - 1) * x;
	}
}

int main (){
	setvbuf(stdout, NULL, _IONBF, 0);

	printf ("Handling with negative power \n");
	double v;
	int j;

	for (j = -2; j < 3; j++){
		for (v = 1.0; v <= 3.0; v = v + 0.5){
			printf ("%.1lf^%i = %.3lf \n", v, j, powerA (v, j));
		}
	}

	printf ("Power x^2k = x^k * x^k (non-negative powers only)\n");
	int x, n;
	printf ("Please, enter x \n");
	scanf ("%i", &x);
	printf ("Please, enter power of x \n");
	scanf ("%i", &n);
	int r = powerB (x, n);
	if (n < 4){
		if (n == 1){
			printf ("%i to the %ist power is %i", x, n, r);
		}
		if (n == 2){
			printf ("%i to the %ind power is %i", x, n, r);
		}
		if (n == 3){
			printf ("%i to the %ird power is %i", x, n, r);
		}
	}else {
	printf ("%i to the %ith power is %i", x, n, r);
	}
	return 0;
}

//problem 2
#include <stdio.h>
int addSubarray(int x[], int from, int to){

	if (from == to){
		return x [from];
	}
	return addSubarray (x, from, to-1 ) + x [to];
}

int addSubArr (int x[], int from, int to){

	if (from == to){
		return x [from];
	}
	return addSubarray (x, from + 1, to ) + x [from];
}

int main (){

	setvbuf(stdout, NULL, _IONBF, 0);

	int size = 8;
	int arr[] ={4, 5, 7, 6, 7, 2, 4, 5};
	int sum = addSubarray (arr, 0, size-1);
	printf ("Added by \"front recursion\" %i \n", sum);
	sum = addSubArr (arr, 0, size-1);
	printf ("Added by \"back recursion\" %i \n", sum);
	return 0;
}

//problem 3

#include <stdio.h>

double minValue(double arr[], int from, int to)
{
    if(to == 1){
    	return arr[from];
    }

    if(arr[from] > arr[to]){
    	arr[from] = arr[to];
    }
    
    return minValue(arr,from, to-1);
}

int main() {
	setvbuf(stdout, NULL, _IONBF, 0);

	int size = 8, i;
	double arrMin[] ={4.2, 5.5, 7.8, 6.4, 7.8, 9.9, 4.4, 2.7};

	printf ("In array ");
	for (i = 0; i < size; i++){
		printf ("%6.1lf", arrMin [i]);
	}

	printf("\nThe smallest value is equal to %.1lf \n", minValue(arrMin,0, size-1));
	return 0;
}

//problem 4

#include <stdio.h>

void printBinary(int n){
	int arrBin [8], i = 0;
	if (n == 0 || n==1){
		arrBin [i] = n%2;
		printf ("%i", n);
	} else {
		arrBin [i] = n%2;
		i++;
		printBinary (n/2);
	}
	int k = i;
	for (i = k-1; i >=0; i--){
		printf ("%i", arrBin [i]);
	}

}

int main (){
	setvbuf(stdout, NULL, _IONBF, 0);

	int decNum;

	printf ("Please, enter a number less than 256  \n");
	scanf ("%i", &decNum);
	printBinary (decNum);

	return 0;
	}

//problem 5

#include <stdio.h>

long choose(int n, int k) {

	if (n == k){
		return 1;
	} else if (k == 1){
				return n;
			} else {
				return choose(n, k - 1) * (n-k+1) / k;
			}
}

int main(void) {

	setvbuf(stdout, NULL, _IONBF, 0);

	int x, k;

	printf ("For \"x choose k function\", please, enter x \n");
	scanf ("%i", &x);
	printf ("Now enter k \n");
	scanf ("%i", &k);

	printf("The result is %lu \n", choose(x, k));

	return 0;
}
